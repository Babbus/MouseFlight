using UnityEngine;
using DomeClash.Core;
using DomeClash.Ships;

namespace DomeClash.Setup
{
    /// <summary>
    /// MouseFlight Sistemi Sahne Setup Rehberi
    /// Bu script sahne d√ºzenlemesi i√ßin gerekli adƒ±mlarƒ± a√ßƒ±klar
    /// Unity 6000.1.9f1 Compatible
    /// </summary>
    public class SceneSetupGuide : MonoBehaviour
    {
        [Header("Required Hierarchy Structure")]
        [TextArea(10, 20)]
        public string hierarchyStructure = @"
MOUSEFLIGHT SAHNE YAPISI:

Scene Root:
‚îú‚îÄ‚îÄ DomeClashFlightRig (Empty GameObject)
‚îÇ   ‚îú‚îÄ‚îÄ MouseAim (Empty GameObject)
‚îÇ   ‚îî‚îÄ‚îÄ CameraRig (Empty GameObject)
‚îÇ       ‚îî‚îÄ‚îÄ Main Camera (Camera + AudioListener)
‚îÇ
‚îú‚îÄ‚îÄ Example1_Grey (Ship Prefab)
‚îÇ   ‚îú‚îÄ‚îÄ PrototypeShip (Script)
‚îÇ   ‚îú‚îÄ‚îÄ Rigidbody
‚îÇ   ‚îî‚îÄ‚îÄ Model (3D Model)
‚îÇ
‚îú‚îÄ‚îÄ DebugHUD (Empty GameObject)
‚îÇ   ‚îî‚îÄ‚îÄ DebugHUD (Script)
‚îÇ
‚îî‚îÄ‚îÄ Environment
    ‚îú‚îÄ‚îÄ Directional Light
    ‚îú‚îÄ‚îÄ Skybox
    ‚îî‚îÄ‚îÄ Ground/Terrain

√ñNEMLI NOKTALAR:
1. DomeClashFlightRig asla ba≈üka bir objeye parent edilmemeli!
2. MouseAim ve CameraRig mutlaka FlightRig'in child'ƒ± olmalƒ±
3. Ship'e PrototypeShip script'i eklenmeli
4. MouseFlightController script'i FlightRig'e eklenmeli
";

        [Header("Component References")]
        [SerializeField] private Transform flightRig;
        [SerializeField] private Transform mouseAim;
        [SerializeField] private Transform cameraRig;
        [SerializeField] private Camera mainCamera;
        [SerializeField] private Transform aircraft;
        [SerializeField] private PrototypeShip prototypeShip;
        [SerializeField] private MouseFlightController flightController;

        [Header("Auto Setup")]
        [SerializeField] private bool autoSetupScene = false;

        private void Start()
        {
            if (autoSetupScene)
            {
                SetupScene();
            }
            else
            {
                ValidateScene();
            }
        }

        [ContextMenu("Setup Scene Automatically")]
        public void SetupScene()
        {
            Debug.Log("üéØ MouseFlight Scene Setup ba≈ülatƒ±lƒ±yor...");

            // 1. Create Flight Rig
            CreateFlightRig();

            // 2. Setup Camera
            SetupCamera();

            // 3. Setup Ship
            SetupShip();

            // 4. Setup Debug HUD
            SetupDebugHUD();

            // 5. Assign References
            AssignReferences();

            Debug.Log("‚úÖ MouseFlight Scene Setup tamamlandƒ±!");
        }

        private void CreateFlightRig()
        {
            // Create main flight rig
            GameObject rigGO = new GameObject("DomeClashFlightRig");
            rigGO.transform.position = Vector3.zero;
            rigGO.transform.rotation = Quaternion.identity;
            flightRig = rigGO.transform;

            // Add MouseFlightController
            flightController = rigGO.AddComponent<MouseFlightController>();

            // Create MouseAim
            GameObject mouseAimGO = new GameObject("MouseAim");
            mouseAimGO.transform.SetParent(flightRig);
            mouseAimGO.transform.localPosition = Vector3.zero;
            mouseAimGO.transform.localRotation = Quaternion.identity;
            mouseAim = mouseAimGO.transform;

            // Create CameraRig
            GameObject cameraRigGO = new GameObject("CameraRig");
            cameraRigGO.transform.SetParent(flightRig);
            cameraRigGO.transform.localPosition = Vector3.zero;
            cameraRigGO.transform.localRotation = Quaternion.identity;
            cameraRig = cameraRigGO.transform;

            Debug.Log("‚úÖ Flight Rig olu≈üturuldu");
        }

        private void SetupCamera()
        {
            // Find existing camera or create new one
            Camera existingCamera = FindFirstObjectByType<Camera>();
            
            if (existingCamera != null)
            {
                // Move existing camera to camera rig
                existingCamera.transform.SetParent(cameraRig);
                existingCamera.transform.localPosition = new Vector3(0, 9, -30);
                existingCamera.transform.localRotation = Quaternion.identity;
                mainCamera = existingCamera;
            }
            else
            {
                // Create new camera
                GameObject cameraGO = new GameObject("Main Camera");
                cameraGO.transform.SetParent(cameraRig);
                cameraGO.transform.localPosition = new Vector3(0, 9, -30);
                cameraGO.transform.localRotation = Quaternion.identity;
                cameraGO.tag = "MainCamera";

                mainCamera = cameraGO.AddComponent<Camera>();
                cameraGO.AddComponent<AudioListener>();

                // Camera settings
                mainCamera.fieldOfView = 60f;
                mainCamera.nearClipPlane = 1f;
                mainCamera.farClipPlane = 10000f;
            }

            Debug.Log("‚úÖ Camera setup tamamlandƒ±");
        }

        private void SetupShip()
        {
            // Find existing ship or create placeholder
            PrototypeShip existingShip = FindFirstObjectByType<PrototypeShip>();
            
            if (existingShip != null)
            {
                prototypeShip = existingShip;
                aircraft = existingShip.transform;
            }
            else
            {
                // Create placeholder ship
                GameObject shipGO = GameObject.CreatePrimitive(PrimitiveType.Capsule);
                shipGO.name = "PrototypeShip";
                shipGO.transform.position = Vector3.zero;
                shipGO.transform.rotation = Quaternion.identity;
                shipGO.transform.localScale = new Vector3(2, 2, 8);

                // Add Rigidbody
                Rigidbody rb = shipGO.AddComponent<Rigidbody>();
                rb.mass = 100f;
                rb.useGravity = false;

                // Add PrototypeShip component
                prototypeShip = shipGO.AddComponent<PrototypeShip>();
                aircraft = shipGO.transform;
            }

            Debug.Log("‚úÖ Ship setup tamamlandƒ±");
        }

        private void SetupDebugHUD()
        {
            // Create Debug HUD
            GameObject hudGO = new GameObject("DebugHUD");
            var debugHUD = hudGO.AddComponent<DomeClash.UI.DebugHUD>();
            
            // Auto-assign references
            debugHUD.flightController = flightController;
            debugHUD.playerShip = prototypeShip;

            Debug.Log("‚úÖ Debug HUD olu≈üturuldu");
        }

        private void AssignReferences()
        {
            if (flightController != null)
            {
                // Assign all references to flight controller
                var controller = flightController;
                
                // Use reflection to set private fields
                var aircraftField = typeof(MouseFlightController).GetField("aircraft", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                var mouseAimField = typeof(MouseFlightController).GetField("mouseAim", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                var cameraRigField = typeof(MouseFlightController).GetField("cameraRig", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                var camField = typeof(MouseFlightController).GetField("cam", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

                aircraftField?.SetValue(controller, aircraft);
                mouseAimField?.SetValue(controller, mouseAim);
                cameraRigField?.SetValue(controller, cameraRig);
                camField?.SetValue(controller, mainCamera?.transform);

                Debug.Log("‚úÖ References atandƒ±");
            }
        }

        [ContextMenu("Validate Scene Setup")]
        public void ValidateScene()
        {
            Debug.Log("üîç MouseFlight Scene Validation ba≈ülatƒ±lƒ±yor...");

            bool isValid = true;

            // Check Flight Rig
            if (flightRig == null)
            {
                Debug.LogError("‚ùå DomeClashFlightRig bulunamadƒ±!");
                isValid = false;
            }
            else if (flightRig.parent != null)
            {
                Debug.LogError("‚ùå FlightRig ba≈üka bir objeye parent edilmi≈ü! Parent kaldƒ±rƒ±lmalƒ±.");
                isValid = false;
            }

            // Check MouseAim
            if (mouseAim == null)
            {
                Debug.LogError("‚ùå MouseAim bulunamadƒ±!");
                isValid = false;
            }
            else if (mouseAim.parent != flightRig)
            {
                Debug.LogError("‚ùå MouseAim FlightRig'in child'ƒ± deƒüil!");
                isValid = false;
            }

            // Check CameraRig
            if (cameraRig == null)
            {
                Debug.LogError("‚ùå CameraRig bulunamadƒ±!");
                isValid = false;
            }
            else if (cameraRig.parent != flightRig)
            {
                Debug.LogError("‚ùå CameraRig FlightRig'in child'ƒ± deƒüil!");
                isValid = false;
            }

            // Check Camera
            if (mainCamera == null)
            {
                Debug.LogError("‚ùå Main Camera bulunamadƒ±!");
                isValid = false;
            }
            else if (mainCamera.transform.parent != cameraRig)
            {
                Debug.LogError("‚ùå Camera CameraRig'in child'ƒ± deƒüil!");
                isValid = false;
            }

            // Check Ship
            if (aircraft == null)
            {
                Debug.LogError("‚ùå Aircraft bulunamadƒ±!");
                isValid = false;
            }

            if (prototypeShip == null)
            {
                Debug.LogError("‚ùå PrototypeShip component bulunamadƒ±!");
                isValid = false;
            }

            // Check Flight Controller
            if (flightController == null)
            {
                Debug.LogError("‚ùå MouseFlightController bulunamadƒ±!");
                isValid = false;
            }

            if (isValid)
            {
                Debug.Log("‚úÖ MouseFlight Scene Setup ge√ßerli!");
            }
            else
            {
                Debug.Log("‚ùå Scene setup'ƒ±nda sorunlar var. Yukarƒ±daki hatalarƒ± d√ºzeltin.");
            }
        }

        [ContextMenu("Show Setup Instructions")]
        public void ShowSetupInstructions()
        {
            Debug.Log(@"
üéØ MOUSEFLIGHT MANUEL SETUP TALƒ∞MATLARI:

1. DomeClashFlightRig olu≈ütur (Empty GameObject)
   - Position: (0, 0, 0)
   - Parent: NONE (√ßok √∂nemli!)

2. MouseAim olu≈ütur (Empty GameObject)
   - Parent: DomeClashFlightRig
   - Local Position: (0, 0, 0)

3. CameraRig olu≈ütur (Empty GameObject)
   - Parent: DomeClashFlightRig
   - Local Position: (0, 0, 0)

4. Main Camera'yƒ± CameraRig'in child'ƒ± yap
   - Local Position: (0, 9, -30)
   - Tag: MainCamera

5. MouseFlightController script'ini FlightRig'e ekle
   - Aircraft: Ship transform'u ata
   - MouseAim: MouseAim transform'u ata
   - CameraRig: CameraRig transform'u ata
   - Cam: Camera transform'u ata

6. Ship'e PrototypeShip script'i ekle
   - Rigidbody gerekli
   - Mass: 100, UseGravity: false

7. DebugHUD olu≈ütur ve script ekle
   - References'larƒ± ata

‚úÖ Setup tamamlandƒ±ƒüƒ±nda 'Validate Scene Setup' butonunu kullan!
");
        }
    }
} 